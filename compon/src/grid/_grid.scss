$grid-columns: 12;
$grid-gutter-width: 1.875rem;
// Grid breakpoints
//
// Define the minimum and maximum dimensions at which your layout will change,
// adapting to different screen sizes, for use in media queries.
$grid-breakpoints: ( // Extra small screen / phone
xs: 0, 
// Small screen / phone
sm: 544px,
// Medium screen / tablet
md: 768px,
// Large screen / desktop
lg: 1024px,
// Extra large screen / wide desktop
xl: 1200px) !default;
// Grid containers
//
// Define the maximum width of `.container` for different screen sizes.
$container-max-widths: ( sm: 576px, md: 720px, lg: 940px, xl: 1140px) !default;
@import "breakpoints";
@mixin clearfix() {
    &::after {
        content: "";
        display: table;
        clear: both;
    }
}

@mixin make-container($gutter: $grid-gutter-width) {
    margin-left: auto;
    margin-right: auto;
    padding-left: ($gutter / 2);
    padding-right: ($gutter / 2);
    @if not $enable-flex {
        @include clearfix();
    }
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths) {
    @each $breakpoint,
    $container-max-width in $max-widths {
        @include media-breakpoint-up($breakpoint) {
            max-width: $container-max-width;
        }
    }
}

@mixin make-row($gutter: $grid-gutter-width) {
    @if $enable-flex {
        display: flex;
        flex-wrap: wrap;
    }
    @else {
        @include clearfix();
    }
    margin-left: ($gutter / -2);
    margin-right: ($gutter / -2);
}

@mixin make-col($gutter: $grid-gutter-width) {
    position: relative;
    @if not $enable-flex {
        float: left;
    }@else{
        float: none;
    }
    min-height: 1px;
    padding-left: ($gutter / 2);
    padding-right: ($gutter / 2);
}

@mixin make-col-span($size, $columns: $grid-columns) {
    @if $enable-flex {
        flex: 0 0 percentage($size / $columns);
        max-width: percentage($size / $columns);
    }
    @else {
        width: percentage($size / $columns);
    }
}

@mixin make-col-offset($size, $columns: $grid-columns) {
    margin-left: percentage($size / $columns);
}

@mixin make-col-push($size, $columns: $grid-columns) {
    left: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-pull($size, $columns: $grid-columns) {
    right: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-modifier($type, $size, $columns) {
    // Work around the lack of dynamic mixin @include support (https://github.com/sass/sass/issues/626)
    @if $type==push {
        @include make-col-push($size, $columns);
    }
    @else if $type==pull {
        @include make-col-pull($size, $columns);
    }
    @else if $type==offset {
        @include make-col-offset($size, $columns);
    }
}

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.
@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
    // Common properties for all breakpoints
    %grid-column {
        position: relative;
        // Prevent columns from collapsing when empty
        min-height: 1px;
        // Inner gutter via padding
        padding-left: ($gutter / 2);
        padding-right: ($gutter / 2);
        box-sizing: border-box;
    }
    @each $breakpoint in map-keys($breakpoints) {
        @for $i from 1 through $columns {
            .kit-col_#{$breakpoint}_#{$i} {
                @extend %grid-column;
            }
        }
        @include media-breakpoint-up($breakpoint) {
            // Work around cross-media @extend (https://github.com/sass/sass/issues/1050)
            %grid-column-float-#{$breakpoint} {
                float: left;
            }
            @for $i from 1 through $columns {
                .kit-col_#{$breakpoint}_#{$i} {
                    @if not $enable-flex {
                        @extend %grid-column-float-#{$breakpoint};
                    }@else{
                        float: none;
                    }
                    @include make-col-span($i, $columns);
                }
            }
            @each $modifier in (pull, push, offset) {
                @for $i from 0 through $columns {
                    .kit-col_#{$breakpoint}-#{$modifier}_#{$i} {
                        @include make-col-modifier($modifier, $i, $columns)
                    }
                }
            }
        }
    }
}

.kit-grid {
    @include make-container();
    box-sizing: border-box;
}

// Fluid container
// width for fluid, full width layouts.
.kit-grid_fluid {
    @include make-container();
    box-sizing: border-box;
}

//for fixed width container
.kit-grid_fixed {
    @include make-container-max-widths();
    box-sizing: border-box;
}

.kit-row {
    @include make-row();
    box-sizing: border-box;
}

@if $enable-flex {
    @each $breakpoint in map-keys($grid-breakpoints) {
        @include media-breakpoint-up($breakpoint) {
            .kit-row_#{$breakpoint}-direction_reverse {
                flex-direction: row-reverse;
            }
            .kit-row_#{$breakpoint}-direction_unset {
                flex-direction: unset;
            }
        }
    }
}

// Columns
//
// Common styles for small and large grid columns
@include make-grid-columns();
// Flex variation
//
// Custom styles for additional flex alignment options.
@if $enable-flex {
    // Flex column reordering
    @each $breakpoint in map-keys($grid-breakpoints) {
        @include media-breakpoint-up($breakpoint) {
            .kit-col_#{$breakpoint}-order_first {
                order: -1;
            }
            .kit-col_#{$breakpoint}-order_last {
                order: 1;
            }
            .kit-col_#{$breakpoint}-order_unset {
                order: unset;
            }
        }
    }
    // Alignment for every column in row
    @each $breakpoint in map-keys($grid-breakpoints) {
        @include media-breakpoint-up($breakpoint) {
            .kit-row_#{$breakpoint}-justify_start {
                justify-content: flex-start;
                text-align: start;
            }
            .kit-row_#{$breakpoint}-justify_center {
                justify-content: center;
                text-align: center;
            }
            .kit-row_#{$breakpoint}-justify_end {
                justify-content: flex-end;
                text-align: end;
            }
            .kit-row_#{$breakpoint}-justify_around {
                justify-content: space-around;
            }
            .kit-row_#{$breakpoint}-justify_between {
                justify-content: space-between;
            }
            .kit-row_#{$breakpoint}-justify_unset {
                justify-content: unset;
                text-align: inherit;
            }
            .kit-row_#{$breakpoint}-align_top {
                align-items: flex-start;
            }
            .kit-row_#{$breakpoint}-align_middle {
                align-items: center;
            }
            .kit-row_#{$breakpoint}-align_bottom {
                align-items: flex-end;
            }
            .kit-row_#{$breakpoint}-align_unset {
                align-items: unset;
            }
        }
    }

    // Alignment per column
    @each $breakpoint in map-keys($grid-breakpoints) {
        @include media-breakpoint-up($breakpoint) {
            // Хоть названия не соответствуют 1 в 1 CSS-свойствам, но так легче понять визуально.
            .kit-col_#{$breakpoint}-align_top {
                align-self: flex-start;
            }
            .kit-col_#{$breakpoint}-align_middle {
                align-self: center;
            }
            .kit-col_#{$breakpoint}-align_bottom {
                align-self: flex-end;
            }
            .kit-col_#{$breakpoint}-align_unset {
                align-self: unset;
            }
        }
    }
}